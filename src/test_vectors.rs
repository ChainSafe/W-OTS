#[cfg(test)]
mod tests {
    use crate::hasher::{Blake2bHasher, Hasher, Sha3_224Hasher, Sha3_256Hasher};
    use crate::keys::Key;
    use crate::params::{checksum, Params, SEED_SIZE};
    use crate::security;
    use crate::security::ParamsEncoding;

    use hex;

    const TEST_DATA: &[u8; 10] = b"XX NETWORK";

    const TEST_VECTOR_256: [u8; 34] = [
        38, 127, 249, 206, 220, 112, 171, 226, 191, 50, 63, 220, 72, 3, 189, 209, 251, 182, 0, 86,
        98, 113, 43, 174, 7, 95, 115, 145, 216, 128, 64, 1, 16, 0,
    ];

    const CHECKSUM_256: [u8; 2] = [16, 0];

    const TEST_VECTOR_224: [u8; 30] = [
        82, 8, 4, 8, 108, 101, 58, 230, 192, 187, 159, 234, 252, 38, 125, 184, 97, 60, 179, 51,
        224, 146, 175, 237, 207, 0, 109, 245, 13, 112,
    ];

    const CHECKSUM_224: [u8; 2] = [13, 112];

    const TEST_VECTOR_192: [u8; 26] = [
        82, 8, 4, 8, 108, 101, 58, 230, 192, 187, 159, 234, 252, 38, 125, 184, 97, 60, 179, 51,
        224, 146, 175, 237, 11, 165,
    ];

    const CHECKSUM_192: [u8; 2] = [11, 165];

    #[test]
    fn checksum_256_test() {
        let mut hasher = Sha3_256Hasher::new();
        hasher.write(TEST_DATA.to_vec());
        let mut out = vec![0u8; Sha3_256Hasher::size()];
        hasher.sum(&mut out);

        let ret = checksum(&out);
        assert_eq!(ret, CHECKSUM_256);
    }

    #[test]
    fn checksum_224_test() {
        let mut hasher = Sha3_224Hasher::new();
        hasher.write(TEST_DATA.to_vec());
        let mut out = vec![0u8; Sha3_224Hasher::size()];
        hasher.sum(&mut out);

        let ret = checksum(&out);
        assert_eq!(ret, CHECKSUM_224);
    }

    #[test]
    fn checksum_192_test() {
        let mut hasher = Sha3_224Hasher::new();
        hasher.write(TEST_DATA.to_vec());
        let mut out = vec![0u8; Sha3_224Hasher::size()];
        hasher.sum(&mut out);

        let ret = checksum(&out[..24]);
        assert_eq!(ret, CHECKSUM_192);
    }

    #[test]
    fn max_checksum_256_test() {}

    #[test]
    fn min_checksum_test() {}

    #[test]
    fn key_sign_consistency_test() {
        for i in 0..5 {
            let encoding = ParamsEncoding::from(i as u8);
            match encoding {
                ParamsEncoding::Level0 => {
                    consistency_params_test::<Blake2bHasher, Sha3_224Hasher>(
                        security::level_0_params(),
                    );
                }
                ParamsEncoding::Level1 => {
                    consistency_params_test::<Blake2bHasher, Sha3_224Hasher>(
                        security::level_1_params(),
                    );
                }
                ParamsEncoding::Level2 => {
                    consistency_params_test::<Blake2bHasher, Sha3_224Hasher>(
                        security::level_2_params(),
                    );
                }
                ParamsEncoding::Level3 => {
                    consistency_params_test::<Blake2bHasher, Sha3_224Hasher>(
                        security::level_3_params(),
                    );
                }
                ParamsEncoding::Consensus => {
                    consistency_params_test::<Blake2bHasher, Sha3_256Hasher>(
                        security::consensus_params(),
                    );
                }
                _ => {
                    assert!(false);
                }
            };
        }
    }

    fn consistency_params_test<PRFH: Hasher + Clone, MSGH: Hasher + Clone>(
        params: Params<PRFH, MSGH>,
    ) {
        let params_copy = params.clone();
        println!("testing encoding {:?}", params.encoding);
        let mut key = Key::new(params_copy).unwrap();
        key.generate().unwrap();
        let signature = key.sign(TEST_DATA).unwrap();
        assert_eq!(signature[0], u8::from(&params.encoding));
        assert_eq!(signature[1..1 + SEED_SIZE], key.p_seed);

        let compare = match params.m {
            32 => TEST_VECTOR_256.to_vec(),
            28 => TEST_VECTOR_224.to_vec(),
            24 => TEST_VECTOR_192.to_vec(),
            _ => {
                assert!(false);
                return;
            }
        };

        let offset = 1 + SEED_SIZE;
        let chains = &key.chains.unwrap();
        for i in 0..params.total {
            let start = i * params.n;
            let end = (i + 1) * params.n;
            assert_eq!(
                signature[offset + start..offset + end],
                chains[compare[i] as usize][start..end]
            );
        }

        params
            .verify(TEST_DATA, &signature[1..], &key.public_key)
            .unwrap();
    }

    #[test]
    fn verify_conformance_test() {
        // verify a signature generated by the Go implementation
        struct TestCase {
            msg: Vec<u8>,
            public_key: Vec<u8>,
            signature: Vec<u8>,
        }

        let test_cases: Vec<TestCase> = vec![
            TestCase { // consensus params
                msg: hex::decode("e36756d3590e9277ad44802df50a8ded1fec2a4cc622c7cd0114e6a3b0ce28b08f715e36b197fafb7d63834c4b89d309cb40bad0e85125a5385a6974b2c8190433679d7f601fae6eee2b02f51540e37c5f37dd1f1bf00a986e506b781a08fc2ec9786957d27f2af2c4e649d0cd455b394a8d34995db4fe3395ff7870f037276785f29c7b927ab8374c3144209fed7666acb885300c872057970141bbfb9175fb900755a057ecdee8a97089f330d1982df21cce90cbf878eab26902869f7aa3e1d6ec4a25ab932f74119c53239067231cbd75a86f73f59c61bc95e1f665fd006692df51e60829f70730685455a2c02e0d34a2ee9af65ad39e8c83553f5cce").unwrap(),
                public_key: hex::decode("82877d8b2af93409789291f85cd5ce039b8a69e6d69ed4c573fb06f851bca298").unwrap(),
                signature: hex::decode("04a2d5e4cc35893506e5dfc6e219f0dd7be41edebc64340073060fa3be2ccd7031c2c5cccecfe87794c8351d1f75855fb2718fa6c7173e77d382211db2b209933cf6f1346d1d321887945277741d7e9b3e0db33dafce52c0aed95c5b928aefa2d7aaf4303aed9357e7dba7701440437c2f27720a2a6b2975558c36972fd8fcabe6b6bbb57261a2e377ee95ac94f6723a8bad7287c9993bef31086b9496c7305581bf204ffd293935c0d54a12bfa66b0d81e4e790e24a10987e32020e92fb77540049445c2b79c8413f61f61227053704c6e9b80c983fb59ca4bd4268f1e9262167d0ac5f1bdabb83cc6d5768acc0312354033a24b6b8c5328d8ed14128bff8329ff3f14c50a021d276bac97d1681cd65cb67d57132f2fdd8008fcc6d9b47523a02517d9c53b75ed957e7ea6ef0bfcdc11db5bc40cae92fd465de01e2d782f96ba9f7bc242d89e0dbbc15910c31ad8142a7ea89fb18fd7e1e7b4c177d6d9a56b4c7368e0a86ff91bc7c2f7ce08c19a8f9f4bf2839a67ab50d3d9ba84cd004aef0247209e07c772d9d5009640a2e20047b3d53a6d3a824bc797119e2a54d0f8db066823dc84cc410b9fabb8ce5007c41f255fe078e3863b13255b79a7e67646a910f9af027885691c5fc10cd1b356931e04ae73e90d9c3176136d5df6359ae28e9d6c3a809766b7fad498befcb0c9d6a0b03de4aadd8e23912d31d91a4a506d5a4985022b095a7ab632cbc196e0453e2ab3d4271ea4198be1ca087910c2a0284426202f654920da11ab27ac264108794bf338ba5af725df957673e04eb88ba393a0fd1b5af09ad79fb85ea8aabc5a6c94de55ba794f328e726e80d7f8cb308f736e1a4ff547aab3be19152e4cca3f87fb0651b07aaf40b29573f19478a8a5821a8f8a52f1959d58731b223d16e5438f861f040c5d2ec78c48f099f0ec90e530757d1c1af407037451b53f84e86d110097ea48a2bca79c009c60135524382c44bbecb75aa98519d7c07fbd36bea18ef27793b47c44e46b994b1cd0564298bfed72e3d7b7ce0eb6c5e6825d52aebd17386f6dc36fe9b37b16eb14c6774bd9f0857a202ce34faa834a7f06c2455aea8e48d3b0993fa8e1a1a03db09adea74feff377ac377592ee153eb21eadf5fbdf833fd9812acab05393e7107803920647b4596f7278b4a874f236623173d9e18cc58a2ea7438bdc9cdb792f8b5466a1a9b556f0fcbc739b0dd1b5fb0bba2ce71e9d5c793d14a7a1614d2106fd7a017305be43cc2898e2ecd028cbfcee626fe4c971bb8d11198996b4121a4ba16a8cffcec562bf9561d93d4243aae4ae1b6774063bcb24d1791e56d59f32d1f9810ba040c78846316c3207928c34b90118942d92ceae044776c99e01da9036c88533f890deab9df6bc43850928c5039d7cc0a530514ca98e8521dd5bd4be1ca526062a7d8c6270f81bb93d1723b13ff60effac22b8b0f61ebf2759ba30d02b9da88eb11d66f3070172c7b9148411e69c505eb8565c76b4f555ab891b38ed0910e68dd245322570720eff94ca8039857e2ad136bd0f3e141585ce8017b6ad9119390e996a908674f23").unwrap(),
            },
            TestCase { // level 0 params
                msg: hex::decode("f8295f6d75bd65001883c587fdab5a7a2f89fb50c846f7372e8dedafa70f64890d51880c11559e89a80431f61cb94b84a581d425b89cee342e2bcad09f23632deac4c041a9e76ebda8af8452302accff1a5c2ff5424503a4b07804543bfed29166aa59c86dff4b0cb69cbd180ab010e9889b8c5ae2e6239528ed840aa979f9283e951117581eef52b572db089a3823592c7130594749eb28294ead4f86ca8828521b58c93425cc4ad93cf1e0ee812d82b4448daefd20e64816be9ff262ccfa628935266e959e0c2dfd46f98efc6551be37cd784ba938c63171c7b29e2f9d4a9c9912c10c912b309e9b7dd7144c6f14f75e86eb1fc9fe7c62c8453232d807").unwrap(),
                public_key: hex::decode("45ba846e57d0a64bb65bab8dec7db2731b7675574fd7bbb3573d3373b2368c15").unwrap(),
                signature: hex::decode("00010ac9c16ec0ce1986686a993199e478c9f9dd0f7ae4850e610961612f2c654930fa0f73f28e2195fa031341db469a5053d49016494b676ad674e74aa37adc0542de695e9859d248a4c0b8adddaeddb57d2f0d63cebcb0d51ba6f173c5116db4d4b58c13c502e6e86ab9a57b8520ef38e835cbe98086f0c3b932e7b608ba1a48ca09c430fe6a2a77b5d1c82877dfc70fef4f5d515364b5550d3d669e345a9ee546bb1d4ef9c1993f66f34a8755d80e7111fb86d0975fe5e36972aec97fb7cbf705e3f92e43fac75e71f956a10e39db7893aba041edacb32f63f102645f46e0a933fd25292ce59f2d87420614a0c3eef80d7fbca7a9634c915747fa392c4eb4694d051df29466a39f1185ec788711522485681427a5a39ab4a45156aceb85c38487e0f18b4756d7c3be6f3ffd3c6a9349dc4ddcc259240effe853d3118ff2591e2ebd3967ef47d26156074d01b89d77444a8cf5425af040b9f522c6e79a467e0d0c381b2e2a1b408f4d51ad5dcdecb84cc4508bc7b6ddcfc83ba4b2b43b3b0db5e4f4993f38bd24e5424b6e09d77bf413e70c0e692f895aaf44df37184f71bc1bd9751eddd19de683f8225a75f1182e65fee8f3d8162b896e9ee56756f7c0a6d35634ac8a6c18106f4b408aecca60d0c5329ac9411cbc65b1e4c2ae85bf3f6fea978a5762ca6daeb8fe1a2d8922d4b5d0976193d36816ef5e4c9987f0c7108b0f7dde13c0eee93e6c2de7bb8daf63047846ee37207451d50e7a1e7b6a6db5d6e080aca6b103e9cf80").unwrap(),
            },
            TestCase { // level 1 params
                msg: hex::decode("e88a84f61746cbe1fb74093103880019dfbda7e648df292d5cc64fa42f1cb41511abc09393ff96c521981191db6bc87c17b0a4a09f99806404e46ed2f9292a586904382dbc89b1190b34ae55122d4018cb055b29de63e59121c081997cec653c51890f711a41a55c5e1382b0cebc88f4cf49917dc70ddc7ba6adb15bdc3e4bf143fc11ee22726700100c7bb272f0b1cd78332112f8069ddab4c24688867fdd89f33a3e1dd88bb72ec2bbb6a199279dbbd13a8ca49ff0c9bfdc52f06f144abfc921d34c083252680935648f3f52a4f6a44a68beffd94ee40ed0f7195774422bd7001fcfcbbe42d0430f48b81512754e3ee226cd2ff852513ba7054d81d379").unwrap(),
                public_key: hex::decode("f72dead4421c9674bf822530264f151df25908d656f8a5841bd2d59c3179c93d").unwrap(),
                signature: hex::decode("01c84862da18b8cd8ba3ca3701b2b21886a187b15be7dd2fc40fa889f0b9d5608fe114ab7bb53e8ccff3d5b82251dbbe58347cc2b58ea823ed4e7360c2970ae51c1982f1034b076020360566347501d6f6b47fa3e4e587f3a5731843526f12e17891324f61b9406c917fb17db06faf43f127d1cc6ba9e13071a5d1831d7b15658dd34e7af9d9b4295d996edb895399aadb1e4cedf7c1dd2387510da2ddcf78f1e0f7316c1ad54ea929a12b5b19f360101b236371fca9e2619f874c7e2ada557f70d64fff9058d48445ca0dc6ca2841c2183d1854074dc87bcbb452584a7e81f32d97e7eb4b3feccc38c6559425e266a1e26f5f87ddb563c0f1ceacb0dc89e7d427659fb0e7c4cb3dcf254cf1cfb561892b7f32f0f0e9c11ce75e2d998dc06cf83c6139cdef86120552c61862e3b2a8fa85daf11bfb35a05a9bfce19f2a03e580b29dc4c01280ada2de4cb9611a818a6e5581cdad16555caaca5639e09b0e81f1a616613bd77999fee62433773c9f4b0dcef166126378808e255991f300f2ed979d6e9e83ad069afa4377581e358c8eccc7981c69d99ac3dabe4e0692005c071bf94e96d36b7f95f69d5f1f8ba0852a6268deb876e8c7029aec7b7ed56a503e995c8a99bf03ef5ecd8381b718ea1acc79d58efd1f50407074bc8b3735597a74ce19cae8a8aeee83f8dc361c9929069e3c6f39178222c4201a029e1593e662e4c7fd10c5ea29b1294b2b282d6cb7e4dafd6abda9e50f3d06f595236c056668812b259c53d9c3bc8614234a1884c4ea576af91510e5d5d3d300854c61dea288e2deccf79c41391684ce797c18d8b699863bce1697d2452c0b52752cec98db69ba4a78ef2b9a050a0033ca7e2f335c43e22a8380b8fb0b052162c685c3fcd22ea4aa4846a6957a5fcd05aa2e8ac5af78e09de3").unwrap(),
            },
            TestCase { // level 2 params
                msg: hex::decode("b0f69fa53433b563c92a6e3a87ed316226af815e30a25f570021a16708246eae9e6891811fe814ead0055a168c288effc218118352330637947956f1952b6f3c34c59df241e4f5cab8e6571139063aaddf9cfbf3ac8ea644874ea92d0234f8995345e80cf7dabecb5512946f5ab8229c25899d4ee6a69c231170ceb37d907bdbe8f3061baeee8acc85376d720f6b12a6b35269658ef81567bc8e01a85444598138a4e86049097c0c1e25b56b7dbe54b73130453c3192a7e1a4a7456b605d3c5903627a53efae7fc45253292827442984196ff60c85b7e106dd23e0b2b05be492d75bb8a6cad03e1b65680c0c0981f0f3c9c52e72772189e5dd5559495cb3").unwrap(),
                public_key: hex::decode("6f81691bfd26a196963fad628ec36b3abc48ec07598c44eed09c37371a2e7014").unwrap(),
                signature: hex::decode("02d3451c981a032432e1ede4e83a63aa77bb168e29dcb5d2c253712de537799a5e63614efd6723b654532a831b610bdfbdb01a48224329fa97d91c0e55c414e788c2fdcdfa049d9b10cff88becc5e13e13e2762b46aefa512b929ca9e3777903b3a18bf9ef736f53046c3ee4a5429d6501f32dc9aec285fb882d899bb2861aeeefc995215de740a0438dce52bdb51d57c5210b585a26e113fd3ca6b5c5e4579f1bf298f2b26fd0e640497aa747c7605ae8915a5ac60a0930aee5256de205efd9dbbec1b5615855761b17a33e1fc1d59115eb2ddd23b4f75d626e20d1a25e26e67b41c01d5300f6bd01b0f10b5ac48deb3c2f4819240c6dce523538171920d34f8fba9126789cbbda202dabba0211c10f294e214186215dbde8917ff09328eaf42489d05d2a913130f69b70ecd826ee8b703057cc89195d082c18138e2e28e94ef4535e25a0073c02066266124bf72498fdf3a0132bc9911641a68560a5afb1b234e1a311cc07bf51504170e59d839834b1c8d025359f5d37311a784f6cb0f62dbe60ac7db6dba67b6028fd603ddcdcc46d746fe8e79b787c574df185780b28e9851b1859cf5ad900cac0ef1781a8fd23c766223e445d009b739bb2821fe21e6454d34038ef617aacba3a6e0d439f8649d0cd395933c809da4a50b9b04a1e28c6d6283866cc1f5b6eebebf68a08915e0c41b3fd95c0f743a6aedc40c52732f5e2dd0b74bd948dde4f8d7720cdfc32c20eb1e88ca5e180f1a3279e0a23b201ab434f1169918cd13160e04f7cd0834887cf75328fd11fe053f1e5bdd2d9002745fcb683f268263a1a080d285333fa4e194126b8eb7a2eb063ae4e53f372360534658355cbb2fbfcacebaf365980503542c64715a5c2791850427d2860d297964bba5b4d87b65829562999a2b65c0e0f1865178bc316f6e923754161f3eb26bff97e478f8171465f2b81c8ba5d6d0a533720420aadb457d54801c302a947238f9f6841778339c5fbc6bfcc249e49f2d56b8a7c7ad87d7afcb4443e668585b11fe644a1f423dec3b5cd2a6fadc945a68a7d5dfb3d0dd110294b91ae").unwrap(),
            },
            TestCase { // level 3 params
                msg: hex::decode("c3daa3c896eb561337e7274d165dbd4ecce88463a7723cfc27e000180c5b6a95cb867fcefa47426a460cfccd77099af7872797a9fee5a22265d0c40ba67148b290f931401b73065edc660c7efc3f9c4f52fa5bbe95a2d86fa16387aa763a9d76be06ed54b05a8da053d8863fb759e0222b45b55be38457980a5782b238c34d1e103fe7924cbd5217ee9c528f612282324801655a75e1f73a8dd29b0dec91965e87f51a9be0436c43c5e1654e3f908e6df2f64813b44bbcb17bc5fa25d7dce1e48f28da1aae6584d2d48e3ecdc84dd7b18a70d07773028df98039f1d1c08a2e3dd713a4ec6e19cdbe868a4690ef20b651c291df33e4aaa47acc1ff4502faa").unwrap(),
                public_key: hex::decode("fb40878b78e62e1b909c0fc0adc946758c1469f616c511e1f25f615864ac3aeb").unwrap(),
                signature: hex::decode("0380fd20797d882af72c5e16266b3b253dffa65f78a15ceb25c9f9b9b76ddd4598f07f7ba2050b28182481e13cc141399bad80f35694ca8f813accbce2753d3d5abbd11534bc08db29805e6f9f53ed10bf36d88a37e038d5c184b98d5a185704e93901513b6cb1c5d9ca4d835c4a3231a3b22b8829e70394c4215f8ff5bded5c7955eb4a4072ae24f8f9dea7e535ea313994e18fbe9d7bac4400315c77191699521c340d15686bb743d2d61e12673909f98335305323cf6a45ad1f5cb1a81b5cfb9dd1f98c0cd5dd85e74860f6a43f8bbe9bd348c1917b0017826b463cc5ddfa22172c53eff177eeeb253dc449bf919100deeb56c65cdfffcb69403fbed2af671b137620b1049c4d1812b6f947ebc31a8f1f7100c9e67fb3f7431eda48b4eae916d6c32db83704dd4f67d4f2990e779fdd865f9024d2bc1a36954448b8d79cc687800cddd041b6bd703982c237eeb1d0ae5fe315df66492d0960f4fed6703f01f0eea464f52e2437ddea8eb990345b86dc3fffa27da177787e46803cfbf7f9c8a982b9881f04c2a06f33cb8e6341292656113ccab1cc6102718aa9db173750504724f4a7dc122da22190780b58f847123910c804ec27faa00175b415922bd6505233b4fd0f36ef80f571be97ced787ba8e907c9bc0d95bdb3a259bd8efd67cf01aa1684aa151e466bae1ead010f67a05055754d3332dcfd8159c220001282070be57d017bb7fd5982328ee77963a75ebf659a7c8a799088832d03c28caaf3f2e9757b58495f49d6137b4213cfd59633e891a875e2f99fd7c12db2cce97fc8eb2c1e70b98e592099708e9d45221017806ccf4196eff1a8497d81637e8d59c4ffd253bdeb0fd1de437e04e7f793270cfc9e5e6c85bb03b4fda1760998709b13556bc098a412076f1e535b040bb780bbb6b933ae351949b8a41a75c09ceba2f17a63e39cf23b3d5a8c0a970986433f8c21d1c1c4c26000415f29b9404cf4670c112fd6c0b9ccefe8017eadf8af93ab2963251b79e18313eef84173c49f02a2dd05fda80fb08898be0160632207a874e2d73e3fa2c6ad26b49c46d9084c404ac3f94a33690c9fa82b28d44853fd6ccce1fa74d5532749f9e944329f73a6dede95b9ab70d423e6056b8b33789c8b63460830d86d2ac16e5db44490abf004aab10a2850cc95b6b51c8417cc92c4996e7dec86ea05b03bcf883aeadc8dff05db295742558").unwrap(),
            },
        ];

        for tc in test_cases.iter() {
            security::verify(&tc.msg, &tc.signature, &tc.public_key).unwrap();
        }
    }

    #[test]
    fn compute_public_key_conformance_test() {
        let secret_seed =
            hex::decode("66d24fb8688c9a0024c56925e2ce2af01ecabdb5a1097dae43d91f1d4ae87afc")
                .unwrap();
        let public_seed =
            hex::decode("8cd018d6da1d57511fc18ad0ec914346d5f40d2eaf45dc8471b9799f413f3064")
                .unwrap();
        let expected_secret_key = hex::decode("dde323e7cb7ff3087c346615c098441ccf102f72beade7f987edbd3352c3a4eb022f35de76b8363436cf71e05f33bd3dfc7a2fc260e757f81c233d4e615b919b0b1801738312fabc746b0ce5d0d324f0829ea8656a84165391f79df9637ec7ec9ab7c49e1d220ee26978eb96b1317ee35c9597ad89ca4a360aec61e84add353d5c5e1fce06525197be5d070ac78e3a481392a84ad67dcac3a8337ca12cc72b69571311af75c66486bd8e9f436b888f2880dbe751d05371031bbab6fcc9812fb4a40379b397879a9f804f61d957e51e7b166d2798ea8c60e8e6d6749f7681e2e56695f49eccc946d2d3d95219f8eeef6a9be09a5b1d0a74323bc5b9a59e57a2d83de0cbe4b41e1322c64786809232eefee2bd97efa8773977e61b68871569b625a28ad7281d24c9a1bd5464e62656099dcea8bdac2f4bdac6cb721164ccadd327c115c7eb87ccb835d37d287aaa41e53d37d789abdeedae99025b7943cf5f93c91b4ba8daa27756f69a2d50336377a96c42d18e4bc2357d835c346b1f8071974b61ceab7183f8cd765e0be54ebb8f20443c7e682e259c457dc7c38595399421da1277f376d68d112d6f71d1876f4dcd194c5e8b51748d141492ed1d79fef771dd258de4036d8d4f021d884dfd1386d79823ad7943cc906090df72e996f0f74b2baef9c9edfa0cce9f5b68ab68684095d9f66f3ae0b32678bf43b3519a02b1a4bb05026d4095c53554").unwrap();
        let expected_public_key =
            hex::decode("7bd49cdc5f70766c70c973a2d6c76b964333ac853c5ae8ecbfef5f1fde08705a")
                .unwrap();
        let mut seed = [0u8; 32];
        seed.copy_from_slice(&secret_seed);
        let mut p_seed = [0u8; 32];
        p_seed.copy_from_slice(&public_seed);
        let key = Key::from_seed(security::level_0_params(), seed, p_seed).unwrap();
        assert_eq!(key.secret_key, expected_secret_key);
        assert_eq!(key.public_key, expected_public_key);
    }
}
